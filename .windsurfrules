# Documentation Guidelines

1. README Updates
   - Update README.md whenever significant changes are made to:
     - RAG system components
     - Agent system features
     - Prompt templates
     - Database schema
     - Integration points
   - Keep the README synchronized with the latest state of the project

2. Component Documentation
   - Update documentation when modifying:
     - RAG system (src/rag/)
     - Agent system (src/agents/)
     - Prompt templates (src/prompts/)
     - Storage systems (src/storage/)
     - Telegram integration (src/telegram/)

# Component Creation Guidelines

When creating a new component in the Godfarda project, follow this structure:

1. Create appropriate directory in `src/` following the template:

Required Structure:
component_name/
├── __init__.py      # Package initialization
├── core.py         # Core functionality
├── models.py       # Data models (if needed)
└── tests/          # Test directory
    ├── __init__.py
    └── test_core.py

Implementation Requirements:
1. Follow existing patterns in similar components
2. Implement proper async support where needed
3. Use type hints and comprehensive docstrings
4. Add unit tests for all functionality
5. Create a README.md containing:
   - Component description
   - Usage examples
   - Integration points
   - Configuration options
   - Testing procedures

Best Practices:
1. Use async/await for I/O operations
2. Implement proper error handling
3. Follow existing project patterns
4. Keep documentation current
5. Ensure type safety
6. Maintain test coverage

# Error Tracking

1. Error Discovery
   - Log newly discovered errors to `errors_discovered_log.txt`
   - Include timestamp, component, and error description

2. Error Resolution
   - Document fixes in `errors_fixed_log.txt`
   - Reference the original error from `errors_discovered_log.txt`
   - Include fix timestamp and verification steps

3. Error Recurrence
   - Track repeated errors in `error_repeated_log.txt`
   - Reference both discovery and previous fix entries
   - Analyze patterns to prevent future occurrences