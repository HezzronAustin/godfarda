
    Documentation Guidelines:
1. README Updates
   - Update README.md whenever significant changes are made to:
     - Project structure
     - Available tools
     - Setup requirements
     - Testing procedures
     - Documentation structure
   - Keep the README synchronized with the latest state of the project

2. Package Documentation
   - Update tool documentation in docs/tools/ when adding or modifying tools
   - Keep testing documentation (docs/TESTING.md) current with all test suites
   - Update any affected documentation files when making significant changes
   - Document all new features, tools, or changes in appropriate documentation files

# Tool Creation Guidelines

When creating a new tool in the AI Tools Ecosystem, always follow this template structure:

1. Create a new directory in `src/tools/` using the template at `/Users/farda/CascadeProjects/ai-tools-ecosystem/src/tools/templates` as the base.

Required Structure:
tool_name/ ├── init.py # Package initialization and exports ├── base.py # Base classes and core functionality ├── main.py # Main tool implementation └── tests/ # Test directory ├── init.py # Test package initialization ├── test_base.py # Base functionality tests └── test_main.py # Main functionality tests


Implementation Requirements:
1. Inherit from `BaseToolTemplate` in `base.py`
2. Implement all required abstract methods:
   - `initialize()`
   - `execute()`
   - `cleanup()`
3. Include comprehensive docstrings and type hints
4. Add unit tests for all functionality
5. Update the tool's README.md with:
   - Tool description
   - Setup instructions
   - Usage examples
   - Configuration options
   - Testing procedures

Best Practices:
1. Follow modular design principles
2. Include proper error handling
3. Validate configurations
4. Keep documentation synchronized
5. Write clean, maintainable code
6. Add comprehensive test coverage

The template provides a standardized starting point that ensures consistency and maintainability across all tools in the ecosystem.